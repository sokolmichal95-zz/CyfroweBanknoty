package Bank;

import Banknote.Note;
import Utils.RSA;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigInteger;
import java.net.ServerSocket;
import java.net.Socket;
import java.security.NoSuchAlgorithmException;
import Utils.Utils;
import java.util.ArrayList;

public class Bank {

    public static void main(String[] args) throws IOException,
            ClassNotFoundException, NoSuchAlgorithmException {
        // TODO Bank losuje klucze prywatny i publiczny
        // TODO publiczny przesyła do Alice, która odwala całą robotę z RSA

        ServerSocket serverSocket = new ServerSocket(4444);
        Socket socket = serverSocket.accept();
        ObjectOutputStream oos;
        ObjectInputStream ois;
        RSA rsa;

        //Tablica zaciemnionych banknotów
        BigInteger[] blindedNotes = new BigInteger[100];

        rsa = new RSA();
        oos = new ObjectOutputStream(socket.getOutputStream());
        oos.writeObject(rsa.getPublicKey());
        System.out.println("Wysłałem klucz publiczny do Alice");

        //1. Bank odbiera zaciemnione hasze banknotów od Alice.
        ois = new ObjectInputStream(socket.getInputStream());
        blindedNotes = (BigInteger[]) ois.readObject();

        for (BigInteger i : blindedNotes) {
            System.out.println("blinded: " + i);
        }

        //2. Bank wybiera losowo liczbę naturalną [1,100] i odsyła ją do Alice.
        int bankChoice = Utils.generateRandomInteger();
        try {
            oos.writeObject(bankChoice);
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
        System.out.println("Wybór: " + bankChoice);

        //3. Bank odbiera od Alice wszystkie banknoty z wyjątkiem wybranego.
        ArrayList<Note> notesArray = new ArrayList<>(); //lista odkrytych banknotów
        ArrayList<String> rSafe = new ArrayList<>();
        ArrayList<String> lSafe = new ArrayList<>();
        try {
            for (int i = 0; i < 99; i++) {
                notesArray.add((Note) ois.readObject());
                rSafe.add((String) ois.readObject());
                lSafe.add((String) ois.readObject());
            }
        } catch (IOException e) {
            System.out.println("Wyjątek: " + e.getMessage());
        }

        BigInteger r = (BigInteger) ois.readObject();

        // 4. Bank odkrywa zakryte banknoty
        ArrayList<BigInteger> revealedNotes = new ArrayList<>();
        for (int i = 0; i < bankChoice; i++) {
            revealedNotes.add(NoteChecker.noteReveal(blindedNotes[i], r, rsa.getPublicKey()));
        }
        for (int i = bankChoice + 1; i < 100; i++) {
            revealedNotes.add(NoteChecker.noteReveal(blindedNotes[i], r, rsa.getPublicKey()));
        }
        for (BigInteger b : revealedNotes) {
            Utils.SysOut("revealed: " + b.toString());
        }
        //4.1 Bank oblicza hasze banknotów, które dostał od Alice
        ArrayList<BigInteger> checkNotes = new ArrayList<>();
        int it = 0;
        ////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////
        for (int i = 0; i < bankChoice; i++) {
            checkNotes.add(Utils.getBigInteger(notesArray.get(i)));
        }
        for (int i = bankChoice + 1; i < 100; i++) {
            checkNotes.add(Utils.getBigInteger(notesArray.get(i)));
        }
        ////////////////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////
        //4.2 Bank sprawdza zgodność obliczonych haszy z "odciemnionymi" banknotami.
        if (NoteChecker.checkNotes(revealedNotes, checkNotes)) {
            Utils.SysOut("Banknoty poprawnie odkryte");
        } else {
            Utils.SysOut("Czy aby na pewno nie próbujesz mnie oszukać Alice?");
        }
        socket.close();
    }

}

